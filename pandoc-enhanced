#!/bin/bash

# Pandoc Enhanced - A wrapper for pandoc with enhanced features
# Adds: QR code generation, emoji support, theme system, and CJK optimizations
# All native pandoc options are passed through transparently

# Get script directory
if [ -L "$0" ]; then
    SCRIPT_DIR="$( cd "$( dirname "$(readlink "$0")" )" &> /dev/null && pwd )"
else
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
fi

# Enhanced features help
show_enhanced_help() {
    cat << EOF
Pandoc Enhanced - Additional features for pandoc

ENHANCED FEATURES:
  --theme COLOR           PDF theme color (blue|red|green|purple|orange|teal|#hex)
                         Default: #B55F3F
  --qrcode-url URL       Generate QR code from URL and add to PDF titlepage
  --qrcode-bg COLOR      QR code background (transparent|theme|#hex)
  --qrcode-fg COLOR      QR code foreground color (#hex)
  --emoji/--no-emoji     Enable/disable emoji font support (default: enabled)
  --cjk-fonts            Apply optimized CJK (Chinese/Japanese/Korean) fonts
  --eisvogel             Use eisvogel LaTeX template (applied by default for PDF)
  --debug                Show debug information including actual pandoc command

EXAMPLES:
  # Basic PDF with enhanced defaults (eisvogel template, CJK fonts)
  pandoc-enhanced document.md -o output.pdf
  
  # PDF with theme and QR code
  pandoc-enhanced document.md -o output.pdf --theme blue --qrcode-url "https://github.com"
  
  # Pass through native pandoc options
  pandoc-enhanced document.md -o output.pdf --toc --number-sections

Note: All unrecognized options are passed directly to pandoc.

EOF
    echo "========================="
    echo "NATIVE PANDOC OPTIONS:"
    echo "========================="
    pandoc --help
}

# Version info
show_version() {
    echo "Pandoc Enhanced v2.0.0"
    echo "A wrapper for pandoc with enhanced features"
    echo ""
    pandoc --version
}

# Initialize enhanced parameters
THEME=""
QRCODE_URL=""
QRCODE_BG="transparent"
QRCODE_FG=""
EMOJI=true
CJK_FONTS=true
EISVOGEL=true
DEBUG=false

# Arrays for pandoc arguments
PANDOC_ARGS=()
ENHANCED_PANDOC_ARGS=()

# Temporary directory for generated files
TEMP_DIR=""

# Clean up function
cleanup() {
    if [ -n "$TEMP_DIR" ] && [ -d "$TEMP_DIR" ]; then
        if [ "$DEBUG" = false ]; then
            rm -rf "$TEMP_DIR"
        else
            echo "Debug: Temporary files kept in: $TEMP_DIR"
        fi
    fi
}
trap cleanup EXIT

# Theme color helper
get_theme_color() {
    case $1 in
        blue) echo "1E88E5" ;;
        red) echo "E53935" ;;
        green) echo "43A047" ;;
        purple) echo "5D1EB1" ;;
        orange) echo "FB8C00" ;;
        teal) echo "00ACC1" ;;
        *) echo "${1#\#}" ;;
    esac
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_enhanced_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        --theme)
            THEME="$2"
            shift 2
            ;;
        --qrcode-url)
            QRCODE_URL="$2"
            shift 2
            ;;
        --qrcode-bg)
            QRCODE_BG="$2"
            shift 2
            ;;
        --qrcode-fg)
            QRCODE_FG="$2"
            shift 2
            ;;
        --emoji)
            EMOJI=true
            shift
            ;;
        --no-emoji)
            EMOJI=false
            shift
            ;;
        --cjk-fonts)
            CJK_FONTS=true
            shift
            ;;
        --no-cjk-fonts)
            CJK_FONTS=false
            shift
            ;;
        --eisvogel)
            EISVOGEL=true
            shift
            ;;
        --no-eisvogel)
            EISVOGEL=false
            shift
            ;;
        --debug)
            DEBUG=true
            shift
            ;;
        *)
            # Pass all other arguments to pandoc
            PANDOC_ARGS+=("$1")
            shift
            ;;
    esac
done

# Check if pandoc is installed
if ! command -v pandoc &> /dev/null; then
    echo "Error: pandoc is not installed. Please install pandoc first."
    exit 1
fi

# Detect if output is PDF by checking pandoc arguments
OUTPUT_IS_PDF=false
OUTPUT_FILE=""
INPUT_FILE=""

for ((i=0; i<${#PANDOC_ARGS[@]}; i++)); do
    arg="${PANDOC_ARGS[i]}"
    
    # Check for output file
    if [[ "$arg" == "-o" ]] && [[ $((i+1)) -lt ${#PANDOC_ARGS[@]} ]]; then
        OUTPUT_FILE="${PANDOC_ARGS[$((i+1))]}"
        if [[ "$OUTPUT_FILE" =~ \.pdf$ ]]; then
            OUTPUT_IS_PDF=true
        fi
    fi
    
    # Check for output format
    if [[ "$arg" == "-t" ]] && [[ $((i+1)) -lt ${#PANDOC_ARGS[@]} ]]; then
        if [[ "${PANDOC_ARGS[$((i+1))]}" == "pdf" ]]; then
            OUTPUT_IS_PDF=true
        fi
    fi
    
    # Find input file
    if [[ -f "$arg" ]] && [[ "$arg" =~ \.(md|markdown|txt|rst|org|tex)$ ]]; then
        INPUT_FILE="$arg"
    fi
done

# If no output specified but input is markdown, default to PDF
if [ -z "$OUTPUT_FILE" ] && [ -n "$INPUT_FILE" ]; then
    BASENAME=$(basename "$INPUT_FILE" | sed 's/\.[^.]*$//')
    OUTPUT_FILE="${BASENAME}.pdf"
    OUTPUT_IS_PDF=true
    PANDOC_ARGS+=("-o" "$OUTPUT_FILE")
fi

# Apply enhanced features for PDF output
if [ "$OUTPUT_IS_PDF" = true ]; then
    
    # Setup temporary directory
    TEMP_DIR=$(mktemp -d)
    
    # Apply eisvogel template by default
    if [ "$EISVOGEL" = true ]; then
        ENHANCED_PANDOC_ARGS+=("--template" "eisvogel")
        ENHANCED_PANDOC_ARGS+=("--pdf-engine=xelatex")
        ENHANCED_PANDOC_ARGS+=("-M" "titlepage=true")
        
        # Default metadata if not provided
        ENHANCED_PANDOC_ARGS+=("-M" "titlepage-rule-height=2")
        ENHANCED_PANDOC_ARGS+=("-M" "titlepage-rule-color=FFE600")
        ENHANCED_PANDOC_ARGS+=("-M" "titlepage-text-color=FFFFFF")
    fi
    
    # Apply CJK fonts
    if [ "$CJK_FONTS" = true ]; then
        ENHANCED_PANDOC_ARGS+=("-V" "mainfont=Songti SC")
        ENHANCED_PANDOC_ARGS+=("-V" "CJKmainfont=Songti SC")
        ENHANCED_PANDOC_ARGS+=("-V" "monofont=Noto Sans Mono CJK SC")
        ENHANCED_PANDOC_ARGS+=("-V" "sansfont=Noto Sans CJK SC")
    fi
    
    # Apply theme if specified
    if [ -n "$THEME" ]; then
        THEME_COLOR=$(get_theme_color "$THEME")
        ENHANCED_PANDOC_ARGS+=("-M" "titlepage-color=$THEME_COLOR")
    fi
    
    # Generate QR code if URL provided
    if [ -n "$QRCODE_URL" ]; then
        if [ "$DEBUG" = true ]; then
            echo "Debug: Generating QR code for: $QRCODE_URL"
        fi
        
        # Prepare colors
        BG_COLOR="$QRCODE_BG"
        FG_COLOR="${QRCODE_FG:-000000}"
        
        # Handle theme background
        if [ "$QRCODE_BG" = "theme" ] && [ -n "$THEME" ]; then
            THEME_COLOR=$(get_theme_color "$THEME")
            # Apply color transformation for eisvogel
            BG_COLOR=$(python3 -c "
hex_color = '$THEME_COLOR'.lstrip('#')
r = int(hex_color[0:2], 16)
g = int(hex_color[2:4], 16)
b = int(hex_color[4:6], 16)
r_new = round(r * 0.895)
g_new = round(g * 0.937)
b_new = round(b * 0.937)
print('{:02X}{:02X}{:02X}'.format(r_new, g_new, b_new))
" 2>/dev/null || echo "$THEME_COLOR")
            FG_COLOR="${QRCODE_FG:-FFFFFF}"
        fi
        
        # Generate QR code
        QRCODE_OUTPUT=$(python3 "$SCRIPT_DIR/generate_qrcode.py" "$QRCODE_URL" "$TEMP_DIR" 200 "$BG_COLOR" "$FG_COLOR" 2>&1)
        if [ $? -eq 0 ]; then
            QRCODE_PATH=$(echo "$QRCODE_OUTPUT" | grep "QRCODE_PATH:" | cut -d':' -f2-)
            if [ -n "$QRCODE_PATH" ]; then
                ENHANCED_PANDOC_ARGS+=("-M" "titlepage-logo=$QRCODE_PATH")
                ENHANCED_PANDOC_ARGS+=("-M" "logo-width=6cm")
                if [ "$DEBUG" = true ]; then
                    echo "Debug: QR code generated at: $QRCODE_PATH"
                fi
            fi
        else
            echo "Warning: Failed to generate QR code"
            [ "$DEBUG" = true ] && echo "$QRCODE_OUTPUT"
        fi
    fi
    
    # Handle emoji support
    if [ "$EMOJI" = true ] && [ -n "$INPUT_FILE" ]; then
        HEADER_FILE="$TEMP_DIR/emoji-header.tex"
        python3 "$SCRIPT_DIR/generate_emoji_header.py" "$INPUT_FILE" "$HEADER_FILE" 2>/dev/null
        if [ -f "$HEADER_FILE" ]; then
            ENHANCED_PANDOC_ARGS+=("-H" "$HEADER_FILE")
            if [ "$DEBUG" = true ]; then
                echo "Debug: Emoji header generated"
            fi
        fi
    fi
    
    # Add markdown extensions for better compatibility
    if [[ "$INPUT_FILE" =~ \.(md|markdown)$ ]]; then
        # Check if -f is not already specified
        HAS_FROM=false
        for arg in "${PANDOC_ARGS[@]}"; do
            if [[ "$arg" == "-f" ]] || [[ "$arg" == "--from" ]]; then
                HAS_FROM=true
                break
            fi
        done
        
        if [ "$HAS_FROM" = false ]; then
            ENHANCED_PANDOC_ARGS+=("-f" "markdown+wikilinks_title_after_pipe")
        fi
    fi
fi

# Build final pandoc command
FINAL_ARGS=("${PANDOC_ARGS[@]}" "${ENHANCED_PANDOC_ARGS[@]}")

# Debug output
if [ "$DEBUG" = true ]; then
    echo "Debug: Enhanced features applied:"
    echo "  - Eisvogel template: $EISVOGEL"
    echo "  - CJK fonts: $CJK_FONTS"
    echo "  - Emoji support: $EMOJI"
    [ -n "$THEME" ] && echo "  - Theme: $THEME"
    [ -n "$QRCODE_URL" ] && echo "  - QR code: $QRCODE_URL"
    echo ""
    echo "Debug: Running pandoc with arguments:"
    echo "pandoc ${FINAL_ARGS[@]}"
    echo ""
fi

# Execute pandoc
exec pandoc "${FINAL_ARGS[@]}"